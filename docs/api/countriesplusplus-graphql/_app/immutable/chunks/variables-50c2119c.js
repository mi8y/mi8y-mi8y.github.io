function r(){return{convert:n=>n==null||n===""?null:String(n),asString:n=>String(n),type:n=>n.string().optional()}}function u(n){return{convert:e=>{if(typeof e=="object")return e;if(typeof e=="string"){const i=JSON.parse(e);return typeof i!="object"?null:i}return null},asString:e=>JSON.stringify(e),type:e=>e.record(n(e).optional()).optional()}}function a(n){return{convert:e=>{if(Array.isArray(e))return e;if(typeof e=="string"){const i=JSON.parse(e);return Array.isArray(i)?i:null}return null},asString:e=>JSON.stringify(e),type:e=>e.array(n(e)).optional()}}function t(n,e){const i=o=>e.convert(o[n]);return{name:l(n),key:n,asEnv:o=>({[n]:e.asString(o)}),zod:{type:e.type},get:i,getOrDefault:(o,c)=>{var s;return(s=i(o))!=null?s:c}}}function l(n){return n.toLowerCase().replace(/([-_][a-z])/gi,e=>e.toUpperCase().replace("-","").replace("_",""))}var E={APP_LOGO:t("APP_LOGO",r()),APP_TITLE:t("APP_TITLE",r()),APP_FAVICON:t("APP_FAVICON",r()),SITE_ROOT:t("SITE_ROOT",r()),SITE_META:t("SITE_META",u(n=>n.string())),QUERY_GENERATION_FACTORIES:t("QUERY_GENERATION_FACTORIES",u(n=>n.union([n.string(),n.boolean(),n.number(),n.null(),n.record(n.unknown())]))),PAGES:t("PAGES",a(n=>{const e=n.lazy(()=>n.object({title:n.string().min(1),content:n.union([n.array(e),n.string().min(1)])}));return e})),EXTERNAL_LINKS:t("EXTERNAL_LINKS",a(n=>n.object({label:n.string().min(1),href:n.string().min(1),kind:n.string().min(1).optional(),group:n.string().min(1).optional()})))};function p(){return{convert:n=>{if(n===null||n===void 0)return null;switch(typeof n){case"boolean":return n;case"string":const e=n.toLowerCase().trim();return e==="true"||e==="t"||e==="1";case"number":return n!==0;default:return null}},asString:n=>String(n),type:n=>n.boolean().optional()}}t("MAGIDOC_GENERATE",p());const C="Countries++ GraphQL API",d="https://mi8y.github.io/docs/api/countriesplusplus-graphql/logo.png",m="https://mi8y.github.io/docs/api/countriesplusplus-graphql/favicon.ico",h="/docs/api/countriesplusplus-graphql",A='{"description":"Countries++ GraphQL API Documentation","keywords":"countries,graphql,api,rapidapi,free"}',S='[{"title":"Introduction","content":"# Countries++ (GraphQL) API Documentation\\n\\nCountries++ GraphQL API provides a comprehensive GraphQL API to query information on Countries, States/Provinces, Cities, Languages, Currencies, Timezones, Continents and World Regions. Here you\'ll find detailed documentation of various types and queries possible and discover various ways to use this API to the maximum capability.\\n\\n| Connect and Access this API for FREE at Rapid API                                                                                                                            |\\n| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| [![Connect on Rapid API](https://storage.googleapis.com/rapidapi-documentation/connect-on-rapidapi-dark.png)](https://rapidapi.com/mi8y-mi8y-default/api/countries-graphql3) |\\n\\n## Entities\\n\\n### 1. Continents\\n\\n- Alpha-2 Continent Code\\n- Name of the Continent (eg. `North America`)\\n- Countries in the Continent -> [Countries](./introduction#4-countries)\\n\\n### 2. Regions\\n\\n- Name of the Region (eg. `Americas`)\\n- Subregions in this Region -> [Subregions](./introduction#3-subregions)\\n\\n### 3. Subregions\\n\\n- Name of the Subregion (eg. `North America`)\\n- Countries in this Subregion -> [Countries](./introduction#4-countries)\\n\\n### 4. Countries\\n\\n- Codes\\n  - ISO 3166-1 Alpha-2 Country Code (eg. `US`)\\n  - ISO 3166-1 Alpha-3 Country Code (eg. `USA`)\\n  - ISO 3166-1 Numeric-3 Country Code (eg. `840`)\\n  - International Olympics Commitee (IOC) Country Code (eg. `USA`)\\n  - FIFA Country Code (eg. `USA`)\\n- Names in various languages\\n  - Common Country Name (eg. `United States`)\\n  - Official Country Name (eg. `United States of America`)\\n  - Language -> [Languages](./introduction#7-languages)\\n- Flag\\n  - Emoji of the Country Flag (eg. `\u{1F1FA}\u{1F1F8}`)\\n  - SVG of the Country Flag (eg. `https://flagcdn.com/us.svg`)\\n- Administration\\n  - Capital of the Country (eg. `Washington D.C.`)\\n  - Subdivisions (i.e. States/Provinces etc.) of the Country -> [Subdivisions](./introduction#5-subdivisions)\\n- Sovereignity\\n  - Independent Status (eg. `true`\\n  - Assignment Status (eg. `officially-assigned`)\\n- Geographic information\\n  - Continent, this Country belongs to -> [Continent](./introduction#1-continents)\\n  - Region, this Country belongs to -> [Continent](./introduction#2-regions)\\n  - Subregion, this Country belongs to -> [Continent](./introduction#3-subregions)\\n  - Bordering Countries -> [Countries](./introduction#4-countries)\\n  - Landlocked (eg. `false` i.e. have bordering seas)\\n  - Area in sq.km (eg. `9372610`)\\n  - Coordinates (eg. `latitude: 38, longitude: -97` -> `38\xB0N, 97\xB0E`)\\n- Languages in use (not exhaustive) -> [Languages](./introduction#7-languages)\\n- Currencies in use -> [Currencies](./introduction#8-currencies)\\n- Timezones in use -> [Timezones](./introduction#9-timezones)\\n- Country Code Top-level Domains (ccTLD) (eg. `.us`)\\n- International Direct Dialing (ISD/IDD codes) (eg. `+1201, +1202 ... +1986, +1989`)\\n- Demonyms\\n  - Male (eg. `American`)\\n  - Female (eg. `American`)\\n  - Language -> [Languages](./introduction#7-languages)\\n\\n### 5. Subdivisions\\n\\n- ISO 3166-2 Subdivision Code (eg. `US-CA`)\\n- Name of the Subdivision (eg. `California`)\\n- Geo-Coordinates of the Subdivision (eg. `latitude: 36, longitude: -119` -> `36\xB0N, 119\xB0E`)\\n- Cities in this Subdivision -> [Cities](./introduction#6-cities)\\n- Country this Subdivision belongs to -> [Countries](./introduction#4-countries)\\n\\n### 6. Cities\\n\\n- Name of the City (eg. `Palo Alto`)\\n- Geo Coordinates of the City (eg. `latitude: 37, longitude: -122` -> `37\xB0N, 122\xB0E`)\\n- Subdivision, this City belongs to -> [Subdivisions](./introduction#5-subdivisions)\\n- Country, this City belongs to -> [Countries](./introduction#4-countries)\\n\\n### 7. Languages\\n\\n- ISO 693-1 Alpha-2 Language Code (eg. `EN` )\\n- ISO 693-3 Alpha-3 Language Code or ISO 693-5 Alpha-3 Macrolanguage Code (eg. `ENG`)\\n- Name of the Language (eg. `English` )\\n- Countries where this Language is spoken -> [Countries](./introduction#4-countries)\\n\\n### 8. Currencies\\n\\n- ISO 4217 Alpha-3 Currency Code (eg. `USD`)\\n- Name of the Currency (eg. `United States dollar`)\\n- Symbol of the Currency (eq. `$`)\\n- Countries using this Currency -> [Countries](./introduction#4-countries)\\n\\n### 9. Timezones\\n\\n- Timezone Abbreviation (eg. `PST`)\\n- Name of the Timezone (eg. `Pacific Standard Time (North America`)\\n- Zone Name (eg. `America/Los_Angeles`)\\n- Timezone UTC Offset in Seconds (eg. `-28800`)\\n- Timezone UTC Offset ID (eg. `UTC-08:00`)\\n- Countries where this timezone is applicable -> [Countries](./introduction#4-countries)\\n\\n## How to Query?\\n\\nYou can query any of the entities by expanding into details or into higher relations.\\n\\n![Query from top-most entity to the details like language, timezone etc.](https://mi8y.github.io/docs/api/countriesplusplus-graphql/graph-topbottom.png)\\n\\n![Query from bottom-most entity to the higher entities](https://mi8y.github.io/docs/api/countriesplusplus-graphql/graph-bottomtop.png)\\n"}]',f='[{"href":"https://rapidapi.com/mi8y-mi8y-default/api/countries-graphql3","label":"Rapid API"}]',y="true",g={APP_TITLE:C,APP_LOGO:d,APP_FAVICON:m,SITE_ROOT:h,SITE_META:A,PAGES:S,EXTERNAL_LINKS:f,MAGIDOC_GENERATE:y};function b(n){return n.get(g)}function I(n,e){return n.getOrDefault(g,e)}export{b as a,I as g,E as t};
