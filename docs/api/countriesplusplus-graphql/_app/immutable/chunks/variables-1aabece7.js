function o(){return{convert:n=>n==null||n===""?null:String(n),asString:n=>String(n),type:n=>n.string().optional()}}function s(n){return{convert:e=>{if(typeof e=="object")return e;if(typeof e=="string"){const r=JSON.parse(e);return typeof r!="object"?null:r}return null},asString:e=>JSON.stringify(e),type:e=>e.record(n(e).optional()).optional()}}function l(n){return{convert:e=>{if(Array.isArray(e))return e;if(typeof e=="string"){const r=JSON.parse(e);return Array.isArray(r)?r:null}return null},asString:e=>JSON.stringify(e),type:e=>e.array(n(e)).optional()}}function t(n,e){const r=i=>e.convert(i[n]);return{name:c(n),key:n,asEnv:i=>({[n]:e.asString(i)}),zod:{type:e.type},get:r,getOrDefault:(i,g)=>{var a;return(a=r(i))!=null?a:g}}}function c(n){return n.toLowerCase().replace(/([-_][a-z])/gi,e=>e.toUpperCase().replace("-","").replace("_",""))}var d={APP_LOGO:t("APP_LOGO",o()),APP_TITLE:t("APP_TITLE",o()),APP_FAVICON:t("APP_FAVICON",o()),SITE_ROOT:t("SITE_ROOT",o()),SITE_META:t("SITE_META",s(n=>n.string())),QUERY_GENERATION_FACTORIES:t("QUERY_GENERATION_FACTORIES",s(n=>n.union([n.string(),n.boolean(),n.number(),n.null(),n.record(n.unknown())]))),PAGES:t("PAGES",l(n=>{const e=n.lazy(()=>n.object({title:n.string().min(1),content:n.union([n.array(e),n.string().min(1)])}));return e})),EXTERNAL_LINKS:t("EXTERNAL_LINKS",l(n=>n.object({label:n.string().min(1),href:n.string().min(1),kind:n.string().min(1).optional(),group:n.string().min(1).optional()})))};function A(){return{convert:n=>{if(n===null||n===void 0)return null;switch(typeof n){case"boolean":return n;case"string":const e=n.toLowerCase().trim();return e==="true"||e==="t"||e==="1";case"number":return n!==0;default:return null}},asString:n=>String(n),type:n=>n.boolean().optional()}}t("MAGIDOC_GENERATE",A());const p="Countries++ GraphQL API",S="https://mi8y.github.io/docs/api/countriesplusplus-graphql/logo.png",E="/docs/api/countriesplusplus-graphql",m='{"description":"Countries++ GraphQL API Documentation","keywords":"countries,graphql,api,rapidapi,free"}',C='[{"title":"Introduction","content":"# Introduction\\n\\nWelcome to Countries++ GraphQL API Documentation\\n\\nA comprehensive GraphQL API to query information on Countries\\n\\n- Codes\\n    - ISO 3166-1 Alpha-2 Code (eg. `US`)\\n    - ISO 3166-1 Alpha-3 Code (eg. `USA`)\\n    - ISO 3166-1 Numeric-3 Code (eg. `840`)\\n    - International Olympics Commitee (IOC) Code (eg. `USA`)\\n    - FIFA Code (eg. `USA`)\\n- Names in various languages\\n  - Common Name (eg. `United States`)\\n  - Official Name (eg. `United States of America`)\\n  - Language (eg. `English`)\\n- Flag\\n  - Emoji (eg. `\u{1F1FA}\u{1F1F8}`)\\n  - SVG (eg. `https://flagcdn.com/us.svg`)\\n- Capital (eg. `Washington D.C.`)\\n- Subdivisions (i.e. States/Provinces etc.)\\n  - ISO 3166-2 Code (eg. `US-CA`)\\n  - Name (eg. `California`)\\n  - Geo-Coordinates (eg. `latitude: 36, longitude: -119` -> `36\xB0N, 119\xB0E`)\\n  - Cities\\n    - Name (eg. `Palo Alto`)\\n    - Geo Coordinates (eg. `latitude: 37, longitude: -122` -> `37\xB0N, 122\xB0E`)\\n- Geographic information\\n  - Continent (eg. `North America`)\\n  - Region (eg. `Americas`)\\n  - Subregion (eg. `North America`)\\n  - Bordering Countries (eg. `Canada, Mexico` and dive further)\\n  - Landlocked (eg. `false` i.e. have bordering seas)\\n  - Area in sq.km (eg. `9372610`)\\n  - Coordinates (eg. `latitude: 38, longitude: -97` -> `38\xB0N, 97\xB0E`)\\n- Sovereignity\\n  - Independent (eg. `true`\\n  - Assignment Status (eg. `officially-assigned`)\\n- Languages\\n  - ISO 693-1 Alpha-2 Code (eg. `EN` )\\n  - ISO 693-3 Alpha-3 Code or ISO 693-5 Alpha-3 Code for Macrolanguages (eg. `ENG`)\\n  - Name (eg. `English` )\\n- Currencies\\n  - ISO 4217 Alpha-3 Code (eg. `USD`)\\n  - Name (eg. `United States dollar`)\\n  - Symbol (eq. `$`)\\n- Timezones\\n  - Abbreviation (eg. `PST`)\\n  - Name (eg. `Pacific Standard Time (North America`)\\n  - Zone Name (eg. `America/Los_Angeles`)\\n  - UTC Offset in Seconds (eg. `-28800`)\\n  - UTC Offset ID (eg. `UTC-08:00`)\\n- Country Code Top-level Domains (ccTLD) (eg. `.us`)\\n- International Direct Dialing (ISD/IDD codes) (eg. `+1201, +1202 ... +1986, +1989`)\\n- Demonyms\\n  - Male\\n  - Female\\n  - Language\\n"}]',f='[{"href":"https://rapidapi.com/mi8y-mi8y-default/api/countries-graphql3","label":"Rapid API"}]',I="true",u={APP_TITLE:p,APP_LOGO:S,SITE_ROOT:E,SITE_META:m,PAGES:C,EXTERNAL_LINKS:f,MAGIDOC_GENERATE:I};function O(n){return n.get(u)}function T(n,e){return n.getOrDefault(u,e)}export{O as a,T as g,d as t};
